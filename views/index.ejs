<!doctype html>
<html lang="en">
	<head>
		<title>WebRTC Demo</title>
		<link rel="stylesheet" type="text/css" href="styles.css">
	</head>
	<body>

	<div id="cameraSelector">
			Video: <select id="camera"></select>
	</div>

	<video autoplay></video>

	<script>

		var videoArea = document.querySelector("video");
		var videoSelect = document.querySelector('#camera');

		if (typeof MediaStreamTrack === 'undefined' || typeof MediaStreamTrack.getSources === 'undefined') {
				document.querySelector("#cameraSelector").style.visibility="hidden";
			} else {
				MediaStreamTrack.getSources(getCameras);
			}

		videoSelect.onchange = startStream;
			
			startStream();
			
			function getCameras(sourceInfos) {
				for (var i = 0; i !== sourceInfos.length; ++i) {
					var sourceInfo = sourceInfos[i];
					var option = document.createElement('option');
					option.value = sourceInfo.id;
					if (sourceInfo.kind === 'video') {
						option.text = sourceInfo.label || 'camera ' + (videoSelect.length + 1);
						videoSelect.appendChild(option);
					}
				}
			}
			
			function startStream() {
				navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
				var videoSource = videoSelect.value;
				var constraints = {
					audio: false, 
					video: {
						mandatory: {
							minWidth: 480,
							maxWidth: 480,
							minHeight: 360,
							maxHeight: 360
						},
						optional: [{
							sourceId: videoSource
						}]
					}
				};
				
				navigator.getUserMedia(constraints, onSuccess, onError);
			}

		function onSuccess(stream) {
				console.log("Success! We have a stream!");
				videoArea.srcObject=stream;
				// videoArea.className="grayscale_filter";
				videoArea.play();

			}
			
		function onError(error) {
				console.log("Error with getUserMedia: ", error);
			}

	</script>
	</body>
</html>